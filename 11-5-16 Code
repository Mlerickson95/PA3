#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>
using namespace std;

enum ReadingStatus { NOT_STARTED = 0, READING = 1, FINISHED = 2 };
enum PurchaseStatus { OWNED = 0, WISHLIST = 1 };

struct Book
{
	string title;
	string author;
	ReadingStatus readingStatus;
	PurchaseStatus purchaseStatus;
};

string ReadingStatusString(ReadingStatus rs)
{
	if (rs == NOT_STARTED)
	{
		return "Not Started";
	}
	else if (rs == READING)
	{
		return "Reading";
	}
	else if (rs == FINISHED)
	{
		return "Finished";
	}
	else
	{
		return "?";
	}
}

string PurchaseStatusString(PurchaseStatus ps)
{
	if (ps == OWNED)
	{
		return "Owned";
	}
	else if (ps == WISHLIST)
	{
		return "Wishlist";
	}
	else
	{
		return "?";
	}
}

void SetBook(Book & book, string title, string author, PurchaseStatus ps, ReadingStatus rs)
{
	book.title = title;
	book.author = author;
	book.purchaseStatus = ps;
	book.readingStatus = rs;
}

void DisplayBook(Book book)
{
	cout << book.title << " by " << book.author << endl << "\tPurchase: " << PurchaseStatusString(book.purchaseStatus) << ", Reading: " << ReadingStatusString(book.readingStatus) << endl;
}

int GetValidInput(int min, int max)
{
	int choice;
	cout << "Input: ";
	cin >> choice;

	while (choice < min || choice > max)
	{
		cout << "ERROR" << endl;
		cout << "Input: ";
		cin >> choice;
	}
	cin.ignore();
		return choice;
}

void AddBookMenu(Book books[], int & bookCount)
{
	string title;
	string author;
	int ps;
	int rs;

	cout << endl << "Enter a title: " << endl;
	getline(cin, title);
	cout << endl << "Enter an author: " << endl;
	getline(cin, author);

	cout << endl << "Purchase Status:" << endl;
	cout << "\t" << OWNED << ". " << PurchaseStatusString(OWNED) << endl;
	cout << "\t" << WISHLIST << ". " << PurchaseStatusString(WISHLIST) << endl;
	ps = GetValidInput(OWNED, WISHLIST);

	cout << endl << "Reading Status:" << endl;
	cout << "\t" << NOT_STARTED << ". " << ReadingStatusString(NOT_STARTED) << endl;
	cout << "\t" << READING << ". " << ReadingStatusString(READING) << endl;
	cout << "\t" << FINISHED << ". " << ReadingStatusString(FINISHED) << endl;
	rs = GetValidInput(NOT_STARTED, FINISHED);

	SetBook(books[bookCount], title, author, (PurchaseStatus)ps, (ReadingStatus)rs);

	bookCount++;
}

void DisplayBookList(Book books[], int bookCount)
{
	for (int i = 0; i < bookCount; i++)
	{
		cout << i << "  ";
		DisplayBook(books[i]);
	}
}

void UpdateBookMenu(Book books[], int & bookCount)
{
	int index;
	DisplayBookList(books, bookCount);
	cout << "What would you like to update? " << endl;
	index = GetValidInput(0, bookCount - 1);

	string title = books[index].title;
	string author = books[index].author;
	PurchaseStatus ps = books[index].purchaseStatus;
	ReadingStatus rs = books[index].readingStatus;

	cout << "1. Update title " << "\n2. Update author " << "\n3. Update purchase status " << "\n4. Update reading status " << endl;
	int choice = GetValidInput(1, 4);

	if (choice == 1)
	{
		cout << endl << "Enter new title: " << endl;
		getline(cin, title);
	}
	else if (choice == 2)
	{
		cout << endl << "Enter new author: " << endl;
		getline(cin, author);
	}
	else if (choice == 3)
	{
		cout << "Enter new purchase status: \n0. OWNED \n1. WISHLIST" << endl;
		cin >> choice;
		ps = (PurchaseStatus)choice;
	}
	else if (choice == 4)
	{
		cout << "Enter new reading status: \n0. NOT STARTED \n1. READING \n2. FINISHED" << endl;
		cin >> choice;
		rs = (ReadingStatus)choice;
	}
	SetBook(books[index], title, author, ps, rs);
}

void MainMenu(Book books[100], int & bookCount)
{
	bool done = false;
	while (!done)
	{
		cout << endl << "1. Add book \n2. Update book \n3. Display book list \n4. Quit" << endl;

		int choice = GetValidInput(1, 4);

		if (choice == 1)
		{
			AddBookMenu(books, bookCount);
		}
		else if (choice == 2)
		{
			UpdateBookMenu(books, bookCount);
		}
		else if (choice == 3)
		{
			DisplayBookList(books, bookCount);
		}
		else if (choice == 4)
		{
			done = true;
		}
	}
}

void DisplayStats(Book books[100], int bookCount)
{
    int totalFinished = 0;
    int totalReading = 0;
    int totalUnstarted = 0;

    for (int i = 0; i < bookCount; i++)
    {
        if (books[i].readingStatus == FINISHED)
        {
            totalFinished++;
        }
        else if (books[i].readingStatus == NOT_STARTED)
        {
            totalUnstarted++;
        }
        else if (books[i].readingStatus == READING)
        {
            totalReading++;
        }
        cout << "Finished: " << totalFinished << endl;
        cout << "Reading: " << totalReading << endl;
        cout << "Not Started: " << totalUnstarted << endl;
    }
}

int main()
{
	Book books[100];
	int bookCount = 0;

    DisplayStats(books, bookCount);
	MainMenu(books, bookCount);


	return 0;
}
